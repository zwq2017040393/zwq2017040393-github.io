<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>试验</tag>
      </tags>
  </entry>
  <entry>
    <title>语义分割经典论文小结</title>
    <url>/2021/07/08/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>导读：图像的语义分割是计算机视觉的基本任务之一，旨在将图像中的每一个像素进行分类。相对于传统分隔方法，从FCN开始的以深度学习方法为主的端到端语义分割模型将精度带来了质上的提升，<br>本文将最近看过的语义分割模型进行一个总结，旨在在今后的学习中，能够更快更好得回忆起曾经看过的论文，找到思路。</p>
</blockquote>
<h4 id="1-开山之作：FCN全卷积神经网络"><a href="#1-开山之作：FCN全卷积神经网络" class="headerlink" title="1. 开山之作：FCN全卷积神经网络"></a>1. 开山之作：FCN全卷积神经网络</h4><blockquote>
<p>论文题目《Fully Convolutional Networks for Semantic Segmentation》<br>论文地址:<a href="https://arxiv.org/abs/1411.4038">https://arxiv.org/abs/1411.4038</a><br><img src="/2021/07/08/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E5%B0%8F%E7%BB%93/FCN-0.png" width="60%" height="60%" div align="center"></p>
</blockquote>
<h5 id="1-简介"><a href="#1-简介" class="headerlink" title="(1) 简介"></a>(1) 简介</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在检测任务中，通常对图片产生一定量的候选区域，放入卷积神经网络中进行分类，
卷积神经网络在卷积之后会接上全连接层，将产生的特征矩阵（二维）压缩为一维向量，全连接层最后一层输出概率向量， 概率最大的就是当前目标的类别。
但是在语义分割中这么做有明显的缺点：语义分割需要对每一个像素分类，若采用前面的方法， 会比检测问题多的多的候选区域，无疑极度增加了计算量和存储需求；
其次，候选区域的大小不易确定；再者，网络的感知域受到候选区域大小的限制，不能很好地利用上下文信息。</p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该论文开创性地提出了一种end-to-end的全卷积网络训练方式，使卷积神经网络方法可以现实的进行语义分割。
</p>

<h5 id="2-模型结构"><a href="#2-模型结构" class="headerlink" title="(2) 模型结构"></a>(2) 模型结构</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
如图1所示，FCN相较于CNN的不同之处，是讲网络后面的全连接层替换成为了卷积层，最后一层的输出由一条线（概率向量）变为了一个二维热图（实际上是三维输出，每个像素有属于不同类别的概率，给输出增添了一维）。
</p>
<img src="/2021/07/08/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E5%B0%8F%E7%BB%93/FCN-1.png" width="80%" height="80%" div align="center">
<div style="font-size: small; text-align: center">图1.FCN与CNN</div>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
   将特征矩阵从粗糙（coarse outputs）变回像素级别的预测(pixel-dense outputs)是关键，这个过程一般称为上采样（upsample），常见的上采样方法有：
转置卷积（反卷积upconv）、插值法（interpolation）、反池化(unpool)，该论文中采用的方法是双线性插值（bilinearly upsample），选择此方法的原因忘了，
也不想在论文中去找，但我估计这种方法的优点是实现起来相对简单，计算量小一些。
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>


]]></content>
      <categories>
        <category>计算机视觉</category>
        <category>语义分割</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>图像语义分割</tag>
      </tags>
  </entry>
</search>
